// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmwasm/will/query.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryGetWillRequest is the request type for retrieving a will by its ID.
type QueryGetWillRequest struct {
	WillId string `protobuf:"bytes,1,opt,name=will_id,json=willId,proto3" json:"will_id,omitempty"`
}

func (m *QueryGetWillRequest) Reset()         { *m = QueryGetWillRequest{} }
func (m *QueryGetWillRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWillRequest) ProtoMessage()    {}
func (*QueryGetWillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0210316a1a2cb467, []int{0}
}

func (m *QueryGetWillRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryGetWillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWillRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryGetWillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWillRequest.Merge(m, src)
}

func (m *QueryGetWillRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryGetWillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWillRequest proto.InternalMessageInfo

func (m *QueryGetWillRequest) GetWillId() string {
	if m != nil {
		return m.WillId
	}
	return ""
}

// QueryGetWillResponse is the response type returned after retrieving a will.
type QueryGetWillResponse struct {
	// will is the will body
	Will *Will `protobuf:"bytes,1,opt,name=will,proto3" json:"will,omitempty"`
}

func (m *QueryGetWillResponse) Reset()         { *m = QueryGetWillResponse{} }
func (m *QueryGetWillResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWillResponse) ProtoMessage()    {}
func (*QueryGetWillResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0210316a1a2cb467, []int{1}
}

func (m *QueryGetWillResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryGetWillResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWillResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryGetWillResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWillResponse.Merge(m, src)
}

func (m *QueryGetWillResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryGetWillResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWillResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWillResponse proto.InternalMessageInfo

func (m *QueryGetWillResponse) GetWill() *Will {
	if m != nil {
		return m.Will
	}
	return nil
}

// QueryListWillsRequest request
type QueryListWillsRequest struct {
	// address is the address of the contract to query
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListWillsRequest) Reset()         { *m = QueryListWillsRequest{} }
func (m *QueryListWillsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListWillsRequest) ProtoMessage()    {}
func (*QueryListWillsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0210316a1a2cb467, []int{2}
}

func (m *QueryListWillsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryListWillsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListWillsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryListWillsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListWillsRequest.Merge(m, src)
}

func (m *QueryListWillsRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryListWillsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListWillsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListWillsRequest proto.InternalMessageInfo

func (m *QueryListWillsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryListWillsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryListWillsRequest response
type QueryListWillsResponse struct {
	// the will struct for the entries of the response
	Wills []Will `protobuf:"bytes,1,rep,name=wills,proto3" json:"wills"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListWillsResponse) Reset()         { *m = QueryListWillsResponse{} }
func (m *QueryListWillsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListWillsResponse) ProtoMessage()    {}
func (*QueryListWillsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0210316a1a2cb467, []int{3}
}

func (m *QueryListWillsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryListWillsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListWillsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryListWillsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListWillsResponse.Merge(m, src)
}

func (m *QueryListWillsResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryListWillsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListWillsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListWillsResponse proto.InternalMessageInfo

func (m *QueryListWillsResponse) GetWills() []Will {
	if m != nil {
		return m.Wills
	}
	return nil
}

func (m *QueryListWillsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetWillRequest)(nil), "cosmwasm.will.QueryGetWillRequest")
	proto.RegisterType((*QueryGetWillResponse)(nil), "cosmwasm.will.QueryGetWillResponse")
	proto.RegisterType((*QueryListWillsRequest)(nil), "cosmwasm.will.QueryListWillsRequest")
	proto.RegisterType((*QueryListWillsResponse)(nil), "cosmwasm.will.QueryListWillsResponse")
}

func init() { proto.RegisterFile("cosmwasm/will/query.proto", fileDescriptor_0210316a1a2cb467) }

var fileDescriptor_0210316a1a2cb467 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4f, 0x6b, 0x13, 0x41,
	0x1c, 0xcd, 0x44, 0xdb, 0x90, 0x11, 0x0f, 0x4e, 0xa3, 0xc6, 0x20, 0x6b, 0xd9, 0xda, 0x54, 0x2a,
	0xce, 0xd0, 0xe8, 0x5d, 0x8d, 0x60, 0x11, 0x3c, 0xe8, 0x7a, 0x28, 0x78, 0x29, 0x93, 0xee, 0xb0,
	0x0e, 0xec, 0xee, 0x6c, 0xf3, 0x9b, 0x58, 0x6b, 0xe9, 0x45, 0xf0, 0xe4, 0x45, 0xe8, 0xc1, 0xaf,
	0xe0, 0xd1, 0x83, 0x1f, 0xa2, 0xc7, 0xa2, 0x17, 0x4f, 0x22, 0x89, 0xe0, 0xd7, 0x90, 0xf9, 0x13,
	0x93, 0x86, 0xb5, 0xb9, 0x84, 0x99, 0xbc, 0x37, 0xef, 0xbd, 0xdf, 0x9f, 0xc5, 0xd7, 0x76, 0x14,
	0x64, 0x7b, 0x1c, 0x32, 0xb6, 0x27, 0xd3, 0x94, 0xed, 0x0e, 0x44, 0x7f, 0x9f, 0x16, 0x7d, 0xa5,
	0x15, 0xb9, 0x38, 0x86, 0xa8, 0x81, 0x5a, 0xd7, 0x13, 0xa5, 0x92, 0x54, 0x30, 0x5e, 0x48, 0xc6,
	0xf3, 0x5c, 0x69, 0xae, 0xa5, 0xca, 0xc1, 0x91, 0x5b, 0x33, 0x3a, 0x7a, 0xbf, 0x10, 0x63, 0x68,
	0xdd, 0x40, 0x0a, 0x58, 0x8f, 0x83, 0x70, 0x06, 0xec, 0xf5, 0x46, 0x4f, 0x68, 0xbe, 0xc1, 0x0a,
	0x9e, 0xc8, 0xdc, 0xea, 0x78, 0x6e, 0x23, 0x51, 0x89, 0xb2, 0x47, 0x66, 0x4e, 0xd3, 0xe2, 0x0a,
	0xb6, 0x1d, 0xe0, 0x2e, 0x1e, 0xba, 0xc4, 0x33, 0x99, 0x2b, 0x66, 0x7f, 0xdd, 0x5f, 0x21, 0xc5,
	0x4b, 0xcf, 0x8d, 0xcb, 0xa6, 0xd0, 0x5b, 0x32, 0x4d, 0x23, 0xb1, 0x3b, 0x10, 0xa0, 0xc9, 0x55,
	0x5c, 0x33, 0xd1, 0xb6, 0x65, 0xdc, 0x44, 0xcb, 0xe8, 0x56, 0x3d, 0x5a, 0x34, 0xd7, 0x27, 0x71,
	0x78, 0x1f, 0x37, 0x4e, 0xf3, 0xa1, 0x50, 0x39, 0x08, 0xb2, 0x86, 0xcf, 0x1b, 0x86, 0x65, 0x5f,
	0xe8, 0x2c, 0xd1, 0x53, 0xed, 0xa0, 0x96, 0x6a, 0x09, 0xe1, 0x11, 0xc2, 0x97, 0xad, 0xc2, 0x53,
	0x09, 0x56, 0x02, 0xc6, 0x9e, 0x1d, 0x5c, 0xe3, 0x71, 0xdc, 0x17, 0x00, 0xce, 0xb3, 0xdb, 0xfc,
	0xf6, 0xf5, 0x4e, 0xc3, 0x17, 0xf0, 0xd0, 0x21, 0x2f, 0x74, 0x5f, 0xe6, 0x49, 0x34, 0x26, 0x92,
	0xc7, 0x18, 0x4f, 0xda, 0xd2, 0xac, 0x5a, 0xf3, 0x36, 0xf5, 0x6f, 0x4c, 0x0f, 0xa9, 0x1b, 0x92,
	0xef, 0x21, 0x7d, 0xc6, 0x13, 0xe1, 0xfd, 0xa2, 0xa9, 0x97, 0xe1, 0x27, 0x84, 0xaf, 0xcc, 0xa6,
	0xf2, 0x95, 0xdd, 0xc3, 0x0b, 0x26, 0xb8, 0x09, 0x75, 0xee, 0x3f, 0xa5, 0x75, 0xeb, 0xc7, 0x3f,
	0x6f, 0x54, 0x3e, 0xff, 0xf9, 0xb2, 0x8e, 0x22, 0x47, 0x26, 0x9b, 0x25, 0xc1, 0xd6, 0xe6, 0x06,
	0x73, 0x96, 0xd3, 0xc9, 0x3a, 0x1f, 0xaa, 0x78, 0xc1, 0x26, 0x23, 0x6f, 0x71, 0xcd, 0x77, 0x9d,
	0x84, 0x33, 0x21, 0x4a, 0x46, 0xd8, 0x5a, 0x39, 0x93, 0xe3, 0x9c, 0xc2, 0xf6, 0xbb, 0xef, 0xbf,
	0x8f, 0xaa, 0xcb, 0x24, 0x60, 0x93, 0x95, 0xe4, 0x90, 0xc5, 0x6e, 0x31, 0x0f, 0xfc, 0x0e, 0x1c,
	0x92, 0xf7, 0x08, 0xd7, 0xff, 0xb5, 0x86, 0xdc, 0x2c, 0x93, 0x9e, 0x9d, 0x67, 0x6b, 0x75, 0x0e,
	0xcb, 0x47, 0xb8, 0x6d, 0x23, 0xac, 0x92, 0x95, 0xd2, 0x08, 0xa9, 0x04, 0xcd, 0x0e, 0xfc, 0xb8,
	0x0f, 0xbb, 0x0f, 0x8e, 0x87, 0x01, 0x3a, 0x19, 0x06, 0xe8, 0xd7, 0x30, 0x40, 0x1f, 0x47, 0x41,
	0xe5, 0x64, 0x14, 0x54, 0x7e, 0x8c, 0x82, 0xca, 0xcb, 0x76, 0x22, 0xf5, 0xab, 0x41, 0x8f, 0xee,
	0xa8, 0x8c, 0x3d, 0x52, 0x90, 0x6d, 0x4d, 0x84, 0xde, 0x4c, 0x7d, 0x66, 0xbd, 0x45, 0xbb, 0xf7,
	0x77, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xca, 0xf0, 0x10, 0x8d, 0xcc, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetWill retrieves a will by its ID.
	GetWill(ctx context.Context, in *QueryGetWillRequest, opts ...grpc.CallOption) (*QueryGetWillResponse, error)
	// GetWill retrieves all wills by an account address
	ListWills(ctx context.Context, in *QueryListWillsRequest, opts ...grpc.CallOption) (*QueryListWillsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetWill(ctx context.Context, in *QueryGetWillRequest, opts ...grpc.CallOption) (*QueryGetWillResponse, error) {
	out := new(QueryGetWillResponse)
	err := c.cc.Invoke(ctx, "/cosmwasm.will.Query/GetWill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListWills(ctx context.Context, in *QueryListWillsRequest, opts ...grpc.CallOption) (*QueryListWillsResponse, error) {
	out := new(QueryListWillsResponse)
	err := c.cc.Invoke(ctx, "/cosmwasm.will.Query/ListWills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetWill retrieves a will by its ID.
	GetWill(context.Context, *QueryGetWillRequest) (*QueryGetWillResponse, error)
	// GetWill retrieves all wills by an account address
	ListWills(context.Context, *QueryListWillsRequest) (*QueryListWillsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct{}

func (*UnimplementedQueryServer) GetWill(ctx context.Context, req *QueryGetWillRequest) (*QueryGetWillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWill not implemented")
}

func (*UnimplementedQueryServer) ListWills(ctx context.Context, req *QueryListWillsRequest) (*QueryListWillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWills not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetWill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmwasm.will.Query/GetWill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWill(ctx, req.(*QueryGetWillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListWills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListWillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListWills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmwasm.will.Query/ListWills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListWills(ctx, req.(*QueryListWillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmwasm.will.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWill",
			Handler:    _Query_GetWill_Handler,
		},
		{
			MethodName: "ListWills",
			Handler:    _Query_ListWills_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmwasm/will/query.proto",
}

func (m *QueryGetWillRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWillRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWillRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WillId) > 0 {
		i -= len(m.WillId)
		copy(dAtA[i:], m.WillId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WillId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWillResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWillResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWillResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Will != nil {
		{
			size, err := m.Will.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListWillsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListWillsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListWillsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListWillsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListWillsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListWillsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Wills) > 0 {
		for iNdEx := len(m.Wills) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wills[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *QueryGetWillRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WillId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWillResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Will != nil {
		l = m.Will.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListWillsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListWillsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Wills) > 0 {
		for _, e := range m.Wills {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *QueryGetWillRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWillRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWillRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WillId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WillId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryGetWillResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWillResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWillResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Will", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Will == nil {
				m.Will = &Will{}
			}
			if err := m.Will.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryListWillsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListWillsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListWillsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryListWillsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListWillsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListWillsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wills = append(m.Wills, Will{})
			if err := m.Wills[len(m.Wills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

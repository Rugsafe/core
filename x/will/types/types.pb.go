// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmwasm/will/types.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ExecutionComponent defines a single actionable component within a will.
type ExecutionComponent struct {
	// component_type enables the inclusion of different types of execution
	// component name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// component id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// components within a will.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// component type for automatic execution
	//
	// Types that are valid to be assigned to ComponentType:
	//	*ExecutionComponent_Transfer
	//	*ExecutionComponent_Claim
	//	*ExecutionComponent_Contract
	//	*ExecutionComponent_IbcMsg
	ComponentType isExecutionComponent_ComponentType `protobuf_oneof:"component_type"`
}

func (m *ExecutionComponent) Reset()         { *m = ExecutionComponent{} }
func (m *ExecutionComponent) String() string { return proto.CompactTextString(m) }
func (*ExecutionComponent) ProtoMessage()    {}
func (*ExecutionComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{0}
}

func (m *ExecutionComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ExecutionComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ExecutionComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionComponent.Merge(m, src)
}

func (m *ExecutionComponent) XXX_Size() int {
	return m.Size()
}

func (m *ExecutionComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionComponent proto.InternalMessageInfo

type isExecutionComponent_ComponentType interface {
	isExecutionComponent_ComponentType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecutionComponent_Transfer struct {
	Transfer *TransferComponent `protobuf:"bytes,4,opt,name=transfer,proto3,oneof" json:"transfer,omitempty"`
}
type ExecutionComponent_Claim struct {
	Claim *ClaimComponent `protobuf:"bytes,5,opt,name=claim,proto3,oneof" json:"claim,omitempty"`
}
type ExecutionComponent_Contract struct {
	Contract *ContractComponent `protobuf:"bytes,6,opt,name=contract,proto3,oneof" json:"contract,omitempty"`
}
type ExecutionComponent_IbcMsg struct {
	IbcMsg *IBCMsgComponent `protobuf:"bytes,7,opt,name=ibc_msg,json=ibcMsg,proto3,oneof" json:"ibc_msg,omitempty"`
}

func (*ExecutionComponent_Transfer) isExecutionComponent_ComponentType() {}
func (*ExecutionComponent_Claim) isExecutionComponent_ComponentType()    {}
func (*ExecutionComponent_Contract) isExecutionComponent_ComponentType() {}
func (*ExecutionComponent_IbcMsg) isExecutionComponent_ComponentType()   {}

func (m *ExecutionComponent) GetComponentType() isExecutionComponent_ComponentType {
	if m != nil {
		return m.ComponentType
	}
	return nil
}

func (m *ExecutionComponent) GetTransfer() *TransferComponent {
	if x, ok := m.GetComponentType().(*ExecutionComponent_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *ExecutionComponent) GetClaim() *ClaimComponent {
	if x, ok := m.GetComponentType().(*ExecutionComponent_Claim); ok {
		return x.Claim
	}
	return nil
}

func (m *ExecutionComponent) GetContract() *ContractComponent {
	if x, ok := m.GetComponentType().(*ExecutionComponent_Contract); ok {
		return x.Contract
	}
	return nil
}

func (m *ExecutionComponent) GetIbcMsg() *IBCMsgComponent {
	if x, ok := m.GetComponentType().(*ExecutionComponent_IbcMsg); ok {
		return x.IbcMsg
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExecutionComponent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExecutionComponent_Transfer)(nil),
		(*ExecutionComponent_Claim)(nil),
		(*ExecutionComponent_Contract)(nil),
		(*ExecutionComponent_IbcMsg)(nil),
	}
}

// TransferComponent is used for direct asset transfers.
type TransferComponent struct {
	To     string      `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Denom  string      `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount *types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *TransferComponent) Reset()         { *m = TransferComponent{} }
func (m *TransferComponent) String() string { return proto.CompactTextString(m) }
func (*TransferComponent) ProtoMessage()    {}
func (*TransferComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{1}
}

func (m *TransferComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *TransferComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *TransferComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferComponent.Merge(m, src)
}

func (m *TransferComponent) XXX_Size() int {
	return m.Size()
}

func (m *TransferComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferComponent.DiscardUnknown(m)
}

var xxx_messageInfo_TransferComponent proto.InternalMessageInfo

// claim access public type
type ClaimAccessPublic struct{}

func (m *ClaimAccessPublic) Reset()         { *m = ClaimAccessPublic{} }
func (m *ClaimAccessPublic) String() string { return proto.CompactTextString(m) }
func (*ClaimAccessPublic) ProtoMessage()    {}
func (*ClaimAccessPublic) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{2}
}

func (m *ClaimAccessPublic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ClaimAccessPublic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimAccessPublic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ClaimAccessPublic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimAccessPublic.Merge(m, src)
}

func (m *ClaimAccessPublic) XXX_Size() int {
	return m.Size()
}

func (m *ClaimAccessPublic) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimAccessPublic.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimAccessPublic proto.InternalMessageInfo

// claim access private type
type ClaimAccessPrivate struct {
	// set of address to allow claim
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *ClaimAccessPrivate) Reset()         { *m = ClaimAccessPrivate{} }
func (m *ClaimAccessPrivate) String() string { return proto.CompactTextString(m) }
func (*ClaimAccessPrivate) ProtoMessage()    {}
func (*ClaimAccessPrivate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{3}
}

func (m *ClaimAccessPrivate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ClaimAccessPrivate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimAccessPrivate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ClaimAccessPrivate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimAccessPrivate.Merge(m, src)
}

func (m *ClaimAccessPrivate) XXX_Size() int {
	return m.Size()
}

func (m *ClaimAccessPrivate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimAccessPrivate.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimAccessPrivate proto.InternalMessageInfo

// claim access control
type ClaimAccessControl struct {
	// type of access
	//
	// Types that are valid to be assigned to AccessType:
	//
	//	*ClaimAccessControl_Public
	//	*ClaimAccessControl_Private
	AccessType isClaimAccessControl_AccessType `protobuf_oneof:"access_type"`
}

func (m *ClaimAccessControl) Reset()         { *m = ClaimAccessControl{} }
func (m *ClaimAccessControl) String() string { return proto.CompactTextString(m) }
func (*ClaimAccessControl) ProtoMessage()    {}
func (*ClaimAccessControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{4}
}

func (m *ClaimAccessControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ClaimAccessControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimAccessControl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ClaimAccessControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimAccessControl.Merge(m, src)
}

func (m *ClaimAccessControl) XXX_Size() int {
	return m.Size()
}

func (m *ClaimAccessControl) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimAccessControl.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimAccessControl proto.InternalMessageInfo

type isClaimAccessControl_AccessType interface {
	isClaimAccessControl_AccessType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClaimAccessControl_Public struct {
	Public *ClaimAccessPublic `protobuf:"bytes,1,opt,name=public,proto3,oneof" json:"public,omitempty"`
}
type ClaimAccessControl_Private struct {
	Private *ClaimAccessPrivate `protobuf:"bytes,2,opt,name=private,proto3,oneof" json:"private,omitempty"`
}

func (*ClaimAccessControl_Public) isClaimAccessControl_AccessType()  {}
func (*ClaimAccessControl_Private) isClaimAccessControl_AccessType() {}

func (m *ClaimAccessControl) GetAccessType() isClaimAccessControl_AccessType {
	if m != nil {
		return m.AccessType
	}
	return nil
}

func (m *ClaimAccessControl) GetPublic() *ClaimAccessPublic {
	if x, ok := m.GetAccessType().(*ClaimAccessControl_Public); ok {
		return x.Public
	}
	return nil
}

func (m *ClaimAccessControl) GetPrivate() *ClaimAccessPrivate {
	if x, ok := m.GetAccessType().(*ClaimAccessControl_Private); ok {
		return x.Private
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClaimAccessControl) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClaimAccessControl_Public)(nil),
		(*ClaimAccessControl_Private)(nil),
	}
}

// ClaimComponent is designed for actions requiring a claim with proof.
type ClaimComponent struct {
	Access ClaimAccessControl `protobuf:"bytes,1,opt,name=access,proto3" json:"access"`
	// access for private or public calls
	//
	// Types that are valid to be assigned to SchemeType:
	//
	//	*ClaimComponent_Pedersen
	//	*ClaimComponent_Schnorr
	//	*ClaimComponent_Gnark
	SchemeType isClaimComponent_SchemeType `protobuf_oneof:"scheme_type"`
	// types of outputs
	//
	// Types that are valid to be assigned to OutputType:
	//
	//	*ClaimComponent_Transfer
	//	*ClaimComponent_ContractCall
	//	*ClaimComponent_IbcContractCall
	//	*ClaimComponent_IbcSend
	OutputType isClaimComponent_OutputType `protobuf_oneof:"output_type"`
}

func (m *ClaimComponent) Reset()         { *m = ClaimComponent{} }
func (m *ClaimComponent) String() string { return proto.CompactTextString(m) }
func (*ClaimComponent) ProtoMessage()    {}
func (*ClaimComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{5}
}

func (m *ClaimComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ClaimComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ClaimComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimComponent.Merge(m, src)
}

func (m *ClaimComponent) XXX_Size() int {
	return m.Size()
}

func (m *ClaimComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimComponent proto.InternalMessageInfo

type isClaimComponent_SchemeType interface {
	isClaimComponent_SchemeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isClaimComponent_OutputType interface {
	isClaimComponent_OutputType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClaimComponent_Pedersen struct {
	Pedersen *PedersenCommitment `protobuf:"bytes,2,opt,name=pedersen,proto3,oneof" json:"pedersen,omitempty"`
}
type ClaimComponent_Schnorr struct {
	Schnorr *SchnorrSignature `protobuf:"bytes,3,opt,name=schnorr,proto3,oneof" json:"schnorr,omitempty"`
}
type ClaimComponent_Gnark struct {
	Gnark *GnarkZkSnark `protobuf:"bytes,4,opt,name=gnark,proto3,oneof" json:"gnark,omitempty"`
}
type ClaimComponent_Transfer struct {
	Transfer *OutputTransfer `protobuf:"bytes,5,opt,name=transfer,proto3,oneof" json:"transfer,omitempty"`
}
type ClaimComponent_ContractCall struct {
	ContractCall *OutputContractCall `protobuf:"bytes,6,opt,name=contract_call,json=contractCall,proto3,oneof" json:"contract_call,omitempty"`
}
type ClaimComponent_IbcContractCall struct {
	IbcContractCall *IBCContractCall `protobuf:"bytes,7,opt,name=ibc_contract_call,json=ibcContractCall,proto3,oneof" json:"ibc_contract_call,omitempty"`
}
type ClaimComponent_IbcSend struct {
	IbcSend *IBCSend `protobuf:"bytes,8,opt,name=ibc_send,json=ibcSend,proto3,oneof" json:"ibc_send,omitempty"`
}

func (*ClaimComponent_Pedersen) isClaimComponent_SchemeType()        {}
func (*ClaimComponent_Schnorr) isClaimComponent_SchemeType()         {}
func (*ClaimComponent_Gnark) isClaimComponent_SchemeType()           {}
func (*ClaimComponent_Transfer) isClaimComponent_OutputType()        {}
func (*ClaimComponent_ContractCall) isClaimComponent_OutputType()    {}
func (*ClaimComponent_IbcContractCall) isClaimComponent_OutputType() {}
func (*ClaimComponent_IbcSend) isClaimComponent_OutputType()         {}

func (m *ClaimComponent) GetSchemeType() isClaimComponent_SchemeType {
	if m != nil {
		return m.SchemeType
	}
	return nil
}

func (m *ClaimComponent) GetOutputType() isClaimComponent_OutputType {
	if m != nil {
		return m.OutputType
	}
	return nil
}

func (m *ClaimComponent) GetPedersen() *PedersenCommitment {
	if x, ok := m.GetSchemeType().(*ClaimComponent_Pedersen); ok {
		return x.Pedersen
	}
	return nil
}

func (m *ClaimComponent) GetSchnorr() *SchnorrSignature {
	if x, ok := m.GetSchemeType().(*ClaimComponent_Schnorr); ok {
		return x.Schnorr
	}
	return nil
}

func (m *ClaimComponent) GetGnark() *GnarkZkSnark {
	if x, ok := m.GetSchemeType().(*ClaimComponent_Gnark); ok {
		return x.Gnark
	}
	return nil
}

func (m *ClaimComponent) GetTransfer() *OutputTransfer {
	if x, ok := m.GetOutputType().(*ClaimComponent_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *ClaimComponent) GetContractCall() *OutputContractCall {
	if x, ok := m.GetOutputType().(*ClaimComponent_ContractCall); ok {
		return x.ContractCall
	}
	return nil
}

func (m *ClaimComponent) GetIbcContractCall() *IBCContractCall {
	if x, ok := m.GetOutputType().(*ClaimComponent_IbcContractCall); ok {
		return x.IbcContractCall
	}
	return nil
}

func (m *ClaimComponent) GetIbcSend() *IBCSend {
	if x, ok := m.GetOutputType().(*ClaimComponent_IbcSend); ok {
		return x.IbcSend
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClaimComponent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClaimComponent_Pedersen)(nil),
		(*ClaimComponent_Schnorr)(nil),
		(*ClaimComponent_Gnark)(nil),
		(*ClaimComponent_Transfer)(nil),
		(*ClaimComponent_ContractCall)(nil),
		(*ClaimComponent_IbcContractCall)(nil),
		(*ClaimComponent_IbcSend)(nil),
	}
}

// types of outputs for components
type OutputTransfer struct {
	// recipient
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// denom to send
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// amout to send
	Amount *types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *OutputTransfer) Reset()         { *m = OutputTransfer{} }
func (m *OutputTransfer) String() string { return proto.CompactTextString(m) }
func (*OutputTransfer) ProtoMessage()    {}
func (*OutputTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{6}
}

func (m *OutputTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *OutputTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutputTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *OutputTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputTransfer.Merge(m, src)
}

func (m *OutputTransfer) XXX_Size() int {
	return m.Size()
}

func (m *OutputTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_OutputTransfer proto.InternalMessageInfo

// output for contract call
type OutputContractCall struct {
	// contract address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// data to be passed to the contract
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *OutputContractCall) Reset()         { *m = OutputContractCall{} }
func (m *OutputContractCall) String() string { return proto.CompactTextString(m) }
func (*OutputContractCall) ProtoMessage()    {}
func (*OutputContractCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{7}
}

func (m *OutputContractCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *OutputContractCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutputContractCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *OutputContractCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputContractCall.Merge(m, src)
}

func (m *OutputContractCall) XXX_Size() int {
	return m.Size()
}

func (m *OutputContractCall) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputContractCall.DiscardUnknown(m)
}

var xxx_messageInfo_OutputContractCall proto.InternalMessageInfo

// contract component
type ContractComponent struct {
	// contract address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// data to be passed to the contract
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ContractComponent) Reset()         { *m = ContractComponent{} }
func (m *ContractComponent) String() string { return proto.CompactTextString(m) }
func (*ContractComponent) ProtoMessage()    {}
func (*ContractComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{8}
}

func (m *ContractComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ContractComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ContractComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractComponent.Merge(m, src)
}

func (m *ContractComponent) XXX_Size() int {
	return m.Size()
}

func (m *ContractComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ContractComponent proto.InternalMessageInfo

// ibc msg component
type IBCMsgComponent struct {
	// ibc message type
	//
	// Types that are valid to be assigned to IbcMsgType:
	//
	//	*IBCMsgComponent_IbcContractCall
	//	*IBCMsgComponent_IbcSend
	IbcMsgType isIBCMsgComponent_IbcMsgType `protobuf_oneof:"ibc_msg_type"`
}

func (m *IBCMsgComponent) Reset()         { *m = IBCMsgComponent{} }
func (m *IBCMsgComponent) String() string { return proto.CompactTextString(m) }
func (*IBCMsgComponent) ProtoMessage()    {}
func (*IBCMsgComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{9}
}

func (m *IBCMsgComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *IBCMsgComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCMsgComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *IBCMsgComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCMsgComponent.Merge(m, src)
}

func (m *IBCMsgComponent) XXX_Size() int {
	return m.Size()
}

func (m *IBCMsgComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCMsgComponent.DiscardUnknown(m)
}

var xxx_messageInfo_IBCMsgComponent proto.InternalMessageInfo

type isIBCMsgComponent_IbcMsgType interface {
	isIBCMsgComponent_IbcMsgType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type IBCMsgComponent_IbcContractCall struct {
	IbcContractCall *IBCContractCall `protobuf:"bytes,1,opt,name=ibc_contract_call,json=ibcContractCall,proto3,oneof" json:"ibc_contract_call,omitempty"`
}
type IBCMsgComponent_IbcSend struct {
	IbcSend *IBCSend `protobuf:"bytes,2,opt,name=ibc_send,json=ibcSend,proto3,oneof" json:"ibc_send,omitempty"`
}

func (*IBCMsgComponent_IbcContractCall) isIBCMsgComponent_IbcMsgType() {}
func (*IBCMsgComponent_IbcSend) isIBCMsgComponent_IbcMsgType()         {}

func (m *IBCMsgComponent) GetIbcMsgType() isIBCMsgComponent_IbcMsgType {
	if m != nil {
		return m.IbcMsgType
	}
	return nil
}

func (m *IBCMsgComponent) GetIbcContractCall() *IBCContractCall {
	if x, ok := m.GetIbcMsgType().(*IBCMsgComponent_IbcContractCall); ok {
		return x.IbcContractCall
	}
	return nil
}

func (m *IBCMsgComponent) GetIbcSend() *IBCSend {
	if x, ok := m.GetIbcMsgType().(*IBCMsgComponent_IbcSend); ok {
		return x.IbcSend
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IBCMsgComponent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IBCMsgComponent_IbcContractCall)(nil),
		(*IBCMsgComponent_IbcSend)(nil),
	}
}

// for ibc output message, we could make this be contract, or IBC send...
type IBCContractCall struct {
	// contract address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// destination chain
	Chain []byte `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	// data to be passed in the packet
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// channel to be passed in the packet
	Channel []byte `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *IBCContractCall) Reset()         { *m = IBCContractCall{} }
func (m *IBCContractCall) String() string { return proto.CompactTextString(m) }
func (*IBCContractCall) ProtoMessage()    {}
func (*IBCContractCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{10}
}

func (m *IBCContractCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *IBCContractCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCContractCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *IBCContractCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCContractCall.Merge(m, src)
}

func (m *IBCContractCall) XXX_Size() int {
	return m.Size()
}

func (m *IBCContractCall) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCContractCall.DiscardUnknown(m)
}

var xxx_messageInfo_IBCContractCall proto.InternalMessageInfo

// output for ibc send
type IBCSend struct {
	// contract address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// destination chain
	Chain []byte `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	// data to be passed in the packet
	Denom []byte `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	// channel to be passed in the packet
	Channel []byte `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	// amount to send over IBC
	Amount *types.Coin `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *IBCSend) Reset()         { *m = IBCSend{} }
func (m *IBCSend) String() string { return proto.CompactTextString(m) }
func (*IBCSend) ProtoMessage()    {}
func (*IBCSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{11}
}

func (m *IBCSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *IBCSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *IBCSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCSend.Merge(m, src)
}

func (m *IBCSend) XXX_Size() int {
	return m.Size()
}

func (m *IBCSend) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCSend.DiscardUnknown(m)
}

var xxx_messageInfo_IBCSend proto.InternalMessageInfo

// CLAIM TYPES
// SchnorrSignature is used for claims that require a Schnorr signature.
type SchnorrSignature struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SchnorrSignature) Reset()         { *m = SchnorrSignature{} }
func (m *SchnorrSignature) String() string { return proto.CompactTextString(m) }
func (*SchnorrSignature) ProtoMessage()    {}
func (*SchnorrSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{12}
}

func (m *SchnorrSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *SchnorrSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchnorrSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *SchnorrSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchnorrSignature.Merge(m, src)
}

func (m *SchnorrSignature) XXX_Size() int {
	return m.Size()
}

func (m *SchnorrSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_SchnorrSignature.DiscardUnknown(m)
}

var xxx_messageInfo_SchnorrSignature proto.InternalMessageInfo

// PedersenCommitment enables the use of a Pedersen commitment for claims.
type PedersenCommitment struct {
	Commitment       []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	TargetCommitment []byte `protobuf:"bytes,2,opt,name=target_commitment,json=targetCommitment,proto3" json:"target_commitment,omitempty"`
}

func (m *PedersenCommitment) Reset()         { *m = PedersenCommitment{} }
func (m *PedersenCommitment) String() string { return proto.CompactTextString(m) }
func (*PedersenCommitment) ProtoMessage()    {}
func (*PedersenCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{13}
}

func (m *PedersenCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *PedersenCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PedersenCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *PedersenCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PedersenCommitment.Merge(m, src)
}

func (m *PedersenCommitment) XXX_Size() int {
	return m.Size()
}

func (m *PedersenCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_PedersenCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_PedersenCommitment proto.InternalMessageInfo

// GnarkZkSnark is for claims using zero-knowledge succinct non-interactive
// arguments of knowledge.
type GnarkZkSnark struct {
	VerificationKey []byte `protobuf:"bytes,1,opt,name=verification_key,json=verificationKey,proto3" json:"verification_key,omitempty"`
	PublicInputs    []byte `protobuf:"bytes,2,opt,name=public_inputs,json=publicInputs,proto3" json:"public_inputs,omitempty"`
	Proof           []byte `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *GnarkZkSnark) Reset()         { *m = GnarkZkSnark{} }
func (m *GnarkZkSnark) String() string { return proto.CompactTextString(m) }
func (*GnarkZkSnark) ProtoMessage()    {}
func (*GnarkZkSnark) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{14}
}

func (m *GnarkZkSnark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *GnarkZkSnark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GnarkZkSnark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *GnarkZkSnark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GnarkZkSnark.Merge(m, src)
}

func (m *GnarkZkSnark) XXX_Size() int {
	return m.Size()
}

func (m *GnarkZkSnark) XXX_DiscardUnknown() {
	xxx_messageInfo_GnarkZkSnark.DiscardUnknown(m)
}

var xxx_messageInfo_GnarkZkSnark proto.InternalMessageInfo

// Will represents the entire structure of a will.
type Will struct {
	ID          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator     string                `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Name        string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Beneficiary string                `protobuf:"bytes,4,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	Height      int64                 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Status      string                `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Components  []*ExecutionComponent `protobuf:"bytes,7,rep,name=components,proto3" json:"components,omitempty"`
}

func (m *Will) Reset()         { *m = Will{} }
func (m *Will) String() string { return proto.CompactTextString(m) }
func (*Will) ProtoMessage()    {}
func (*Will) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{15}
}

func (m *Will) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Will) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Will.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Will) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Will.Merge(m, src)
}

func (m *Will) XXX_Size() int {
	return m.Size()
}

func (m *Will) XXX_DiscardUnknown() {
	xxx_messageInfo_Will.DiscardUnknown(m)
}

var xxx_messageInfo_Will proto.InternalMessageInfo

// type to hold wills
type Wills struct {
	// the set of wills to return
	Wills []*Will `protobuf:"bytes,1,rep,name=wills,proto3" json:"wills,omitempty"`
}

func (m *Wills) Reset()         { *m = Wills{} }
func (m *Wills) String() string { return proto.CompactTextString(m) }
func (*Wills) ProtoMessage()    {}
func (*Wills) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{16}
}

func (m *Wills) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Wills) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wills.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Wills) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wills.Merge(m, src)
}

func (m *Wills) XXX_Size() int {
	return m.Size()
}

func (m *Wills) XXX_DiscardUnknown() {
	xxx_messageInfo_Wills.DiscardUnknown(m)
}

var xxx_messageInfo_Wills proto.InternalMessageInfo

// WillIds represents a list of will IDs.
type WillIds struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *WillIds) Reset()         { *m = WillIds{} }
func (m *WillIds) String() string { return proto.CompactTextString(m) }
func (*WillIds) ProtoMessage()    {}
func (*WillIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_cec37ad7aa1ffe0b, []int{17}
}

func (m *WillIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *WillIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WillIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *WillIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WillIds.Merge(m, src)
}

func (m *WillIds) XXX_Size() int {
	return m.Size()
}

func (m *WillIds) XXX_DiscardUnknown() {
	xxx_messageInfo_WillIds.DiscardUnknown(m)
}

var xxx_messageInfo_WillIds proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExecutionComponent)(nil), "cosmwasm.will.ExecutionComponent")
	proto.RegisterType((*TransferComponent)(nil), "cosmwasm.will.TransferComponent")
	proto.RegisterType((*ClaimAccessPublic)(nil), "cosmwasm.will.ClaimAccessPublic")
	proto.RegisterType((*ClaimAccessPrivate)(nil), "cosmwasm.will.ClaimAccessPrivate")
	proto.RegisterType((*ClaimAccessControl)(nil), "cosmwasm.will.ClaimAccessControl")
	proto.RegisterType((*ClaimComponent)(nil), "cosmwasm.will.ClaimComponent")
	proto.RegisterType((*OutputTransfer)(nil), "cosmwasm.will.OutputTransfer")
	proto.RegisterType((*OutputContractCall)(nil), "cosmwasm.will.OutputContractCall")
	proto.RegisterType((*ContractComponent)(nil), "cosmwasm.will.ContractComponent")
	proto.RegisterType((*IBCMsgComponent)(nil), "cosmwasm.will.IBCMsgComponent")
	proto.RegisterType((*IBCContractCall)(nil), "cosmwasm.will.IBCContractCall")
	proto.RegisterType((*IBCSend)(nil), "cosmwasm.will.IBCSend")
	proto.RegisterType((*SchnorrSignature)(nil), "cosmwasm.will.SchnorrSignature")
	proto.RegisterType((*PedersenCommitment)(nil), "cosmwasm.will.PedersenCommitment")
	proto.RegisterType((*GnarkZkSnark)(nil), "cosmwasm.will.GnarkZkSnark")
	proto.RegisterType((*Will)(nil), "cosmwasm.will.Will")
	proto.RegisterType((*Wills)(nil), "cosmwasm.will.Wills")
	proto.RegisterType((*WillIds)(nil), "cosmwasm.will.WillIds")
}

func init() { proto.RegisterFile("cosmwasm/will/types.proto", fileDescriptor_cec37ad7aa1ffe0b) }

var fileDescriptor_cec37ad7aa1ffe0b = []byte{
	// 1180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4b, 0x6f, 0x1b, 0x45,
	0x1c, 0xf7, 0x3a, 0x7e, 0xc4, 0x7f, 0x3b, 0xaf, 0x69, 0x55, 0xb9, 0x2f, 0x3b, 0x5d, 0x04, 0x2a,
	0x54, 0xb2, 0x95, 0x14, 0x0e, 0xb4, 0x2a, 0x28, 0xeb, 0x22, 0x1c, 0x41, 0xa1, 0x6c, 0x90, 0x2a,
	0xf5, 0x12, 0x8d, 0x67, 0x27, 0xf6, 0xa8, 0xbb, 0x3b, 0xd6, 0xce, 0xb8, 0x6d, 0xbe, 0x05, 0x1f,
	0x00, 0x21, 0x0e, 0x1c, 0x7a, 0x84, 0x13, 0x5f, 0xa1, 0xc7, 0x1e, 0x38, 0x70, 0xb2, 0x60, 0x7b,
	0x80, 0x8f, 0x81, 0xe6, 0xb1, 0xce, 0xfa, 0xd1, 0xa8, 0x95, 0xb8, 0x24, 0xfb, 0xff, 0xfd, 0xdf,
	0xaf, 0xf1, 0x1f, 0x2e, 0x13, 0x2e, 0xa2, 0x67, 0x58, 0x44, 0xdd, 0x67, 0x2c, 0x0c, 0xbb, 0xf2,
	0x74, 0x4c, 0x45, 0x67, 0x9c, 0x70, 0xc9, 0xd1, 0x46, 0xc6, 0xea, 0x28, 0xd6, 0x95, 0x8b, 0x43,
	0x3e, 0xe4, 0x9a, 0xd3, 0x55, 0x5f, 0x46, 0xe8, 0x4a, 0x4b, 0x09, 0x71, 0xd1, 0x1d, 0x60, 0x41,
	0xbb, 0x4f, 0xf7, 0x06, 0x54, 0xe2, 0xbd, 0x2e, 0xe1, 0x2c, 0xb6, 0xfc, 0x1d, 0x1c, 0xb1, 0x98,
	0x77, 0xf5, 0x5f, 0x03, 0xb9, 0x7f, 0x14, 0x01, 0x7d, 0xf1, 0x9c, 0x92, 0x89, 0x64, 0x3c, 0xee,
	0xf1, 0x68, 0xcc, 0x63, 0x1a, 0x4b, 0x84, 0xa0, 0x14, 0xe3, 0x88, 0x36, 0x9d, 0x5d, 0xe7, 0x66,
	0xcd, 0xd7, 0xdf, 0x68, 0x13, 0x8a, 0x2c, 0x68, 0x16, 0x35, 0x52, 0x64, 0x01, 0xba, 0x04, 0x15,
	0x21, 0xb1, 0x9c, 0x88, 0xe6, 0x9a, 0xc6, 0x2c, 0x85, 0x3e, 0x83, 0x75, 0x99, 0xe0, 0x58, 0x9c,
	0xd0, 0xa4, 0x59, 0xda, 0x75, 0x6e, 0xd6, 0xf7, 0x77, 0x3b, 0x73, 0xd1, 0x77, 0xbe, 0xb7, 0xec,
	0x99, 0xbf, 0x7e, 0xc1, 0x9f, 0xe9, 0xa0, 0x4f, 0xa0, 0x4c, 0x42, 0xcc, 0xa2, 0x66, 0x59, 0x2b,
	0x5f, 0x5f, 0x50, 0xee, 0x29, 0x5e, 0x5e, 0xd3, 0x48, 0x2b, 0xb7, 0x84, 0xc7, 0x32, 0xc1, 0x44,
	0x36, 0x2b, 0x2b, 0xdd, 0xf6, 0x2c, 0x7b, 0xce, 0x6d, 0xa6, 0x83, 0x3e, 0x85, 0x2a, 0x1b, 0x90,
	0xe3, 0x48, 0x0c, 0x9b, 0x55, 0xad, 0xde, 0x5a, 0x50, 0x3f, 0xf4, 0x7a, 0x0f, 0xc4, 0x30, 0xaf,
	0x5c, 0x61, 0x03, 0xf2, 0x40, 0x0c, 0xbd, 0x6d, 0xd8, 0x24, 0x19, 0x7c, 0xac, 0xba, 0xe6, 0x86,
	0xb0, 0xb3, 0x94, 0xa4, 0x2a, 0xa0, 0xe4, 0xb6, 0xa4, 0x45, 0xc9, 0xd1, 0x45, 0x28, 0x07, 0x34,
	0xe6, 0x91, 0xad, 0xa9, 0x21, 0xd0, 0x1e, 0x54, 0x70, 0xc4, 0x27, 0xb1, 0xd4, 0x65, 0xad, 0xef,
	0x5f, 0xee, 0x98, 0xae, 0x76, 0x54, 0x57, 0x3b, 0xb6, 0xab, 0x9d, 0x1e, 0x67, 0xb1, 0x6f, 0x05,
	0xdd, 0x0b, 0xb0, 0xa3, 0xab, 0x72, 0x40, 0x08, 0x15, 0xe2, 0xe1, 0x64, 0x10, 0x32, 0xe2, 0x1e,
	0x00, 0xca, 0x83, 0x09, 0x7b, 0x8a, 0x25, 0x45, 0xb7, 0xa0, 0x86, 0x83, 0x20, 0xa1, 0x42, 0x50,
	0xd1, 0x74, 0x76, 0xd7, 0x6e, 0xd6, 0xbc, 0x8d, 0x74, 0xda, 0xae, 0x1d, 0x64, 0xa0, 0x7f, 0xc6,
	0x77, 0x7f, 0x72, 0xe6, 0x6c, 0xe8, 0xfa, 0xf1, 0x10, 0xdd, 0x81, 0xca, 0x58, 0xfb, 0xd0, 0xb9,
	0xac, 0xa8, 0xf3, 0x62, 0x2c, 0xaa, 0x54, 0x46, 0x03, 0xdd, 0x83, 0xea, 0xd8, 0x84, 0xa2, 0xb3,
	0xae, 0xef, 0xdf, 0x38, 0x47, 0xd9, 0x08, 0xf6, 0x0b, 0x7e, 0xa6, 0xe3, 0x6d, 0x40, 0x1d, 0x6b,
	0x9e, 0x29, 0xf3, 0x6f, 0x25, 0xd8, 0x9c, 0x9f, 0x07, 0x74, 0x1f, 0x2a, 0x46, 0xc2, 0x06, 0x77,
	0x8e, 0x7d, 0x9b, 0x8f, 0x57, 0x7b, 0x39, 0x6d, 0x17, 0x5e, 0xfc, 0xf3, 0xeb, 0x47, 0x8e, 0x6f,
	0x75, 0xd1, 0xe7, 0xb0, 0x3e, 0xa6, 0x01, 0x4d, 0x04, 0x8d, 0xdf, 0x10, 0xe7, 0x43, 0xcb, 0xee,
	0xf1, 0x28, 0x62, 0x32, 0xb2, 0xd3, 0x94, 0x29, 0xa1, 0xbb, 0x50, 0x15, 0x64, 0x14, 0xf3, 0x24,
	0xb1, 0x6d, 0x6c, 0x2f, 0xe8, 0x1f, 0x19, 0xee, 0x11, 0x1b, 0xc6, 0x58, 0x4e, 0x12, 0x9d, 0xa5,
	0xd5, 0x40, 0xb7, 0xa1, 0x3c, 0x8c, 0x71, 0xf2, 0xc4, 0xae, 0xcf, 0xd5, 0x05, 0xd5, 0x2f, 0x15,
	0xef, 0xf1, 0x93, 0x23, 0xf5, 0x4f, 0xcd, 0xbf, 0x96, 0x45, 0x77, 0x73, 0x6b, 0xb7, 0x7a, 0x73,
	0xbe, 0x9d, 0xc8, 0xf1, 0x44, 0x66, 0x73, 0xd9, 0x77, 0x72, 0x3b, 0xd7, 0x87, 0x8d, 0x6c, 0x11,
	0x8e, 0x09, 0x0e, 0x43, 0xbb, 0x41, 0x37, 0x56, 0x5a, 0x98, 0xed, 0x11, 0x0e, 0xc3, 0xbe, 0xe3,
	0x37, 0x48, 0x8e, 0x46, 0x5f, 0xc3, 0x8e, 0x5a, 0xa3, 0x79, 0x6b, 0x6f, 0x5c, 0xa8, 0x05, 0x53,
	0x5b, 0x6c, 0x40, 0xf2, 0x10, 0xba, 0x0d, 0xeb, 0xca, 0x9a, 0xa0, 0x71, 0xd0, 0x5c, 0xd7, 0x46,
	0x2e, 0x2d, 0x1b, 0x39, 0xa2, 0x71, 0xd0, 0x77, 0x7c, 0xb5, 0xbe, 0xea, 0x53, 0x0d, 0x89, 0x20,
	0x23, 0x1a, 0x51, 0x3d, 0x24, 0x8a, 0xe4, 0x3a, 0x6e, 0x33, 0x33, 0x02, 0x36, 0xe7, 0x0b, 0x81,
	0x9a, 0x50, 0xb5, 0x33, 0x6f, 0x97, 0x33, 0x23, 0xff, 0xbf, 0x0d, 0xf5, 0x00, 0x2d, 0xd7, 0xee,
	0x1c, 0xc7, 0x08, 0x4a, 0x01, 0x96, 0x58, 0xfb, 0x6d, 0xf8, 0xfa, 0xdb, 0x3d, 0x80, 0x9d, 0xa5,
	0x17, 0xec, 0x1d, 0x4d, 0xfc, 0xe2, 0xc0, 0xd6, 0xc2, 0x33, 0xb6, 0xba, 0x61, 0xce, 0x5b, 0x35,
	0xac, 0x70, 0x7e, 0xc3, 0x8a, 0xe7, 0x36, 0xac, 0x70, 0xd6, 0xb0, 0x4d, 0x68, 0xd8, 0xa7, 0xd7,
	0xb4, 0x88, 0xeb, 0x28, 0xdf, 0xb2, 0x54, 0x17, 0xa1, 0x4c, 0x46, 0x98, 0xc5, 0x36, 0x51, 0x43,
	0xcc, 0xb2, 0x5f, 0x3b, 0xcb, 0x5e, 0xd9, 0x20, 0x23, 0x1c, 0xc7, 0x34, 0xd4, 0x8b, 0xd5, 0xf0,
	0x33, 0xd2, 0xfd, 0xd1, 0x81, 0xaa, 0x8d, 0xeb, 0x9d, 0x3d, 0xcd, 0x66, 0xc4, 0xb8, 0xb2, 0x33,
	0xf2, 0x46, 0x5f, 0xb9, 0xe9, 0x29, 0xbf, 0xed, 0xf4, 0x30, 0xd8, 0x5e, 0x7c, 0x2e, 0xd0, 0x75,
	0x00, 0xf3, 0xa4, 0x1e, 0x3f, 0xa1, 0xa7, 0x3a, 0xd2, 0x86, 0x5f, 0x33, 0xc8, 0x57, 0xf4, 0x14,
	0x5d, 0x83, 0x9a, 0xc8, 0x64, 0x6d, 0xbc, 0x67, 0x80, 0x8a, 0x2e, 0xa2, 0x42, 0xe0, 0x21, 0xb5,
	0xbf, 0xdd, 0x19, 0xe9, 0x62, 0x40, 0xcb, 0x2f, 0x1b, 0x6a, 0x01, 0x90, 0x19, 0x65, 0x9d, 0xe5,
	0x10, 0x74, 0x0b, 0x76, 0x24, 0x4e, 0x86, 0x54, 0x1e, 0xe7, 0xc4, 0x8c, 0xd7, 0x6d, 0xc3, 0x38,
	0x33, 0xe6, 0x4a, 0x68, 0xe4, 0x5f, 0x30, 0xf4, 0x21, 0x6c, 0x3f, 0xa5, 0x09, 0x3b, 0x61, 0x04,
	0xab, 0x23, 0x24, 0x97, 0xcf, 0x56, 0x1e, 0x57, 0x59, 0xbd, 0x07, 0x1b, 0x36, 0x69, 0x16, 0x8f,
	0x27, 0x52, 0x58, 0x1f, 0x0d, 0x03, 0x1e, 0x6a, 0x4c, 0x35, 0x64, 0x9c, 0x70, 0x7e, 0x92, 0x35,
	0x44, 0x13, 0xee, 0xef, 0x45, 0x28, 0x3d, 0x62, 0x61, 0x88, 0x2e, 0xe9, 0x33, 0x46, 0xb7, 0xd6,
	0xab, 0xa4, 0xd3, 0x76, 0xf1, 0xf0, 0xbe, 0x3e, 0x67, 0xde, 0x87, 0x2a, 0x49, 0x28, 0x96, 0x3c,
	0x31, 0xdb, 0xee, 0xd5, 0xd3, 0x69, 0xbb, 0xda, 0x33, 0x90, 0x9f, 0xf1, 0xd0, 0x35, 0x7b, 0x19,
	0xe9, 0xba, 0x79, 0xeb, 0xe9, 0xb4, 0x5d, 0xfa, 0x06, 0x47, 0xd4, 0xde, 0x48, 0x7b, 0x50, 0x1f,
	0xd0, 0x98, 0x9e, 0x30, 0xc2, 0x70, 0x72, 0xaa, 0x5b, 0x5f, 0xf3, 0xb6, 0xd2, 0x69, 0xbb, 0xee,
	0x9d, 0xc1, 0x7e, 0x5e, 0x06, 0xb9, 0x50, 0x19, 0x51, 0x36, 0x1c, 0x99, 0x79, 0x58, 0xf3, 0x20,
	0x9d, 0xb6, 0x2b, 0x7d, 0x8d, 0xf8, 0x96, 0xa3, 0x64, 0xec, 0xa9, 0x55, 0xd1, 0x16, 0xb5, 0xcc,
	0x91, 0x46, 0x66, 0x67, 0xd7, 0x77, 0xba, 0x47, 0x66, 0xa9, 0x45, 0xb3, 0xba, 0xbb, 0xb6, 0xe2,
	0xfd, 0x5e, 0xbe, 0xf4, 0xbc, 0xcd, 0x74, 0xda, 0x86, 0x19, 0x29, 0xfc, 0x9c, 0x91, 0x3b, 0xa5,
	0x7f, 0x7f, 0x6e, 0x3b, 0xee, 0x3d, 0x28, 0xab, 0xc2, 0x09, 0xf4, 0x31, 0x94, 0x95, 0x15, 0x73,
	0x37, 0xd4, 0xf7, 0x2f, 0x2c, 0x18, 0x57, 0x42, 0x5e, 0x2d, 0x9d, 0xb6, 0x8d, 0xb8, 0x6f, 0x84,
	0xdd, 0xab, 0x50, 0x55, 0xf4, 0x61, 0x20, 0xd0, 0x36, 0xac, 0xb1, 0xc0, 0x9e, 0x1d, 0xbe, 0xfa,
	0xf4, 0xfa, 0x2f, 0xff, 0x6e, 0x15, 0x5e, 0xa4, 0x2d, 0xe7, 0x65, 0xda, 0x72, 0x5e, 0xa5, 0x2d,
	0xe7, 0xaf, 0xb4, 0xe5, 0xfc, 0xf0, 0xba, 0x55, 0x78, 0xf5, 0xba, 0x55, 0xf8, 0xf3, 0x75, 0xab,
	0xf0, 0xf8, 0x83, 0x21, 0x93, 0xa3, 0xc9, 0xa0, 0x43, 0x78, 0xd4, 0xed, 0x71, 0x11, 0x3d, 0xd2,
	0xe7, 0x31, 0x16, 0x51, 0xd0, 0x7d, 0x9e, 0x3b, 0x93, 0x07, 0x15, 0x7d, 0xcf, 0xde, 0xfe, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xbd, 0x3b, 0x19, 0x4f, 0x44, 0x0b, 0x00, 0x00,
}

func (this *ExecutionComponent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionComponent)
	if !ok {
		that2, ok := that.(ExecutionComponent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if that1.ComponentType == nil {
		if this.ComponentType != nil {
			return false
		}
	} else if this.ComponentType == nil {
		return false
	} else if !this.ComponentType.Equal(that1.ComponentType) {
		return false
	}
	return true
}

func (this *ExecutionComponent_Transfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionComponent_Transfer)
	if !ok {
		that2, ok := that.(ExecutionComponent_Transfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transfer.Equal(that1.Transfer) {
		return false
	}
	return true
}

func (this *ExecutionComponent_Claim) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionComponent_Claim)
	if !ok {
		that2, ok := that.(ExecutionComponent_Claim)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Claim.Equal(that1.Claim) {
		return false
	}
	return true
}

func (this *ExecutionComponent_Contract) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionComponent_Contract)
	if !ok {
		that2, ok := that.(ExecutionComponent_Contract)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Contract.Equal(that1.Contract) {
		return false
	}
	return true
}

func (this *ExecutionComponent_IbcMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionComponent_IbcMsg)
	if !ok {
		that2, ok := that.(ExecutionComponent_IbcMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IbcMsg.Equal(that1.IbcMsg) {
		return false
	}
	return true
}

func (this *TransferComponent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferComponent)
	if !ok {
		that2, ok := that.(TransferComponent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}

func (this *ClaimAccessPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimAccessPublic)
	if !ok {
		that2, ok := that.(ClaimAccessPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

func (this *ClaimAccessPrivate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimAccessPrivate)
	if !ok {
		that2, ok := that.(ClaimAccessPrivate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	return true
}

func (this *ClaimAccessControl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimAccessControl)
	if !ok {
		that2, ok := that.(ClaimAccessControl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AccessType == nil {
		if this.AccessType != nil {
			return false
		}
	} else if this.AccessType == nil {
		return false
	} else if !this.AccessType.Equal(that1.AccessType) {
		return false
	}
	return true
}

func (this *ClaimAccessControl_Public) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimAccessControl_Public)
	if !ok {
		that2, ok := that.(ClaimAccessControl_Public)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Public.Equal(that1.Public) {
		return false
	}
	return true
}

func (this *ClaimAccessControl_Private) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimAccessControl_Private)
	if !ok {
		that2, ok := that.(ClaimAccessControl_Private)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Private.Equal(that1.Private) {
		return false
	}
	return true
}

func (this *ClaimComponent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimComponent)
	if !ok {
		that2, ok := that.(ClaimComponent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Access.Equal(&that1.Access) {
		return false
	}
	if that1.SchemeType == nil {
		if this.SchemeType != nil {
			return false
		}
	} else if this.SchemeType == nil {
		return false
	} else if !this.SchemeType.Equal(that1.SchemeType) {
		return false
	}
	if that1.OutputType == nil {
		if this.OutputType != nil {
			return false
		}
	} else if this.OutputType == nil {
		return false
	} else if !this.OutputType.Equal(that1.OutputType) {
		return false
	}
	return true
}

func (this *ClaimComponent_Pedersen) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimComponent_Pedersen)
	if !ok {
		that2, ok := that.(ClaimComponent_Pedersen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pedersen.Equal(that1.Pedersen) {
		return false
	}
	return true
}

func (this *ClaimComponent_Schnorr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimComponent_Schnorr)
	if !ok {
		that2, ok := that.(ClaimComponent_Schnorr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Schnorr.Equal(that1.Schnorr) {
		return false
	}
	return true
}

func (this *ClaimComponent_Gnark) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimComponent_Gnark)
	if !ok {
		that2, ok := that.(ClaimComponent_Gnark)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gnark.Equal(that1.Gnark) {
		return false
	}
	return true
}

func (this *ClaimComponent_Transfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimComponent_Transfer)
	if !ok {
		that2, ok := that.(ClaimComponent_Transfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transfer.Equal(that1.Transfer) {
		return false
	}
	return true
}

func (this *ClaimComponent_ContractCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimComponent_ContractCall)
	if !ok {
		that2, ok := that.(ClaimComponent_ContractCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ContractCall.Equal(that1.ContractCall) {
		return false
	}
	return true
}

func (this *ClaimComponent_IbcContractCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimComponent_IbcContractCall)
	if !ok {
		that2, ok := that.(ClaimComponent_IbcContractCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IbcContractCall.Equal(that1.IbcContractCall) {
		return false
	}
	return true
}

func (this *ClaimComponent_IbcSend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimComponent_IbcSend)
	if !ok {
		that2, ok := that.(ClaimComponent_IbcSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IbcSend.Equal(that1.IbcSend) {
		return false
	}
	return true
}

func (this *OutputTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutputTransfer)
	if !ok {
		that2, ok := that.(OutputTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}

func (this *OutputContractCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutputContractCall)
	if !ok {
		that2, ok := that.(OutputContractCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}

func (this *ContractComponent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContractComponent)
	if !ok {
		that2, ok := that.(ContractComponent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}

func (this *IBCMsgComponent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IBCMsgComponent)
	if !ok {
		that2, ok := that.(IBCMsgComponent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IbcMsgType == nil {
		if this.IbcMsgType != nil {
			return false
		}
	} else if this.IbcMsgType == nil {
		return false
	} else if !this.IbcMsgType.Equal(that1.IbcMsgType) {
		return false
	}
	return true
}

func (this *IBCMsgComponent_IbcContractCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IBCMsgComponent_IbcContractCall)
	if !ok {
		that2, ok := that.(IBCMsgComponent_IbcContractCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IbcContractCall.Equal(that1.IbcContractCall) {
		return false
	}
	return true
}

func (this *IBCMsgComponent_IbcSend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IBCMsgComponent_IbcSend)
	if !ok {
		that2, ok := that.(IBCMsgComponent_IbcSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IbcSend.Equal(that1.IbcSend) {
		return false
	}
	return true
}

func (this *IBCContractCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IBCContractCall)
	if !ok {
		that2, ok := that.(IBCContractCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !bytes.Equal(this.Chain, that1.Chain) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !bytes.Equal(this.Channel, that1.Channel) {
		return false
	}
	return true
}

func (this *IBCSend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IBCSend)
	if !ok {
		that2, ok := that.(IBCSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !bytes.Equal(this.Chain, that1.Chain) {
		return false
	}
	if !bytes.Equal(this.Denom, that1.Denom) {
		return false
	}
	if !bytes.Equal(this.Channel, that1.Channel) {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}

func (this *SchnorrSignature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchnorrSignature)
	if !ok {
		that2, ok := that.(SchnorrSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}

func (this *PedersenCommitment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PedersenCommitment)
	if !ok {
		that2, ok := that.(PedersenCommitment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Commitment, that1.Commitment) {
		return false
	}
	if !bytes.Equal(this.TargetCommitment, that1.TargetCommitment) {
		return false
	}
	return true
}

func (this *GnarkZkSnark) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GnarkZkSnark)
	if !ok {
		that2, ok := that.(GnarkZkSnark)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.VerificationKey, that1.VerificationKey) {
		return false
	}
	if !bytes.Equal(this.PublicInputs, that1.PublicInputs) {
		return false
	}
	if !bytes.Equal(this.Proof, that1.Proof) {
		return false
	}
	return true
}

func (this *Will) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Will)
	if !ok {
		that2, ok := that.(Will)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Beneficiary != that1.Beneficiary {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Components) != len(that1.Components) {
		return false
	}
	for i := range this.Components {
		if !this.Components[i].Equal(that1.Components[i]) {
			return false
		}
	}
	return true
}

func (this *Wills) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Wills)
	if !ok {
		that2, ok := that.(Wills)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Wills) != len(that1.Wills) {
		return false
	}
	for i := range this.Wills {
		if !this.Wills[i].Equal(that1.Wills[i]) {
			return false
		}
	}
	return true
}

func (this *WillIds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WillIds)
	if !ok {
		that2, ok := that.(WillIds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	return true
}

func (m *ExecutionComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ComponentType != nil {
		{
			size := m.ComponentType.Size()
			i -= size
			if _, err := m.ComponentType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionComponent_Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionComponent_Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Transfer != nil {
		{
			size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionComponent_Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionComponent_Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionComponent_Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionComponent_Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Contract != nil {
		{
			size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionComponent_IbcMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionComponent_IbcMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcMsg != nil {
		{
			size, err := m.IbcMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *TransferComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimAccessPublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimAccessPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimAccessPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClaimAccessPrivate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimAccessPrivate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimAccessPrivate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClaimAccessControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimAccessControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimAccessControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessType != nil {
		{
			size := m.AccessType.Size()
			i -= size
			if _, err := m.AccessType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClaimAccessControl_Public) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimAccessControl_Public) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Public != nil {
		{
			size, err := m.Public.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimAccessControl_Private) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimAccessControl_Private) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Private != nil {
		{
			size, err := m.Private.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ClaimComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputType != nil {
		{
			size := m.OutputType.Size()
			i -= size
			if _, err := m.OutputType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SchemeType != nil {
		{
			size := m.SchemeType.Size()
			i -= size
			if _, err := m.SchemeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	{
		size, err := m.Access.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClaimComponent_Pedersen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimComponent_Pedersen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pedersen != nil {
		{
			size, err := m.Pedersen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ClaimComponent_Schnorr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimComponent_Schnorr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Schnorr != nil {
		{
			size, err := m.Schnorr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *ClaimComponent_Gnark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimComponent_Gnark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Gnark != nil {
		{
			size, err := m.Gnark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *ClaimComponent_Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimComponent_Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Transfer != nil {
		{
			size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *ClaimComponent_ContractCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimComponent_ContractCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContractCall != nil {
		{
			size, err := m.ContractCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}

func (m *ClaimComponent_IbcContractCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimComponent_IbcContractCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcContractCall != nil {
		{
			size, err := m.IbcContractCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *ClaimComponent_IbcSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimComponent_IbcSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcSend != nil {
		{
			size, err := m.IbcSend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}

func (m *OutputTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutputTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutputContractCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputContractCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutputContractCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IBCMsgComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCMsgComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCMsgComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IbcMsgType != nil {
		{
			size := m.IbcMsgType.Size()
			i -= size
			if _, err := m.IbcMsgType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IBCMsgComponent_IbcContractCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCMsgComponent_IbcContractCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcContractCall != nil {
		{
			size, err := m.IbcContractCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IBCMsgComponent_IbcSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCMsgComponent_IbcSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcSend != nil {
		{
			size, err := m.IbcSend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *IBCContractCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCContractCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCContractCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IBCSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchnorrSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchnorrSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchnorrSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PedersenCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PedersenCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PedersenCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetCommitment) > 0 {
		i -= len(m.TargetCommitment)
		copy(dAtA[i:], m.TargetCommitment)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TargetCommitment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GnarkZkSnark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GnarkZkSnark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GnarkZkSnark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublicInputs) > 0 {
		i -= len(m.PublicInputs)
		copy(dAtA[i:], m.PublicInputs)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicInputs)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VerificationKey) > 0 {
		i -= len(m.VerificationKey)
		copy(dAtA[i:], m.VerificationKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VerificationKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Will) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Will) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Will) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Components) > 0 {
		for iNdEx := len(m.Components) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Components[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Beneficiary) > 0 {
		i -= len(m.Beneficiary)
		copy(dAtA[i:], m.Beneficiary)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Beneficiary)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Wills) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wills) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wills) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wills) > 0 {
		for iNdEx := len(m.Wills) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wills[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WillIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WillIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WillIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *ExecutionComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ComponentType != nil {
		n += m.ComponentType.Size()
	}
	return n
}

func (m *ExecutionComponent_Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transfer != nil {
		l = m.Transfer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ExecutionComponent_Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ExecutionComponent_Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ExecutionComponent_IbcMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcMsg != nil {
		l = m.IbcMsg.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TransferComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClaimAccessPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClaimAccessPrivate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ClaimAccessControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessType != nil {
		n += m.AccessType.Size()
	}
	return n
}

func (m *ClaimAccessControl_Public) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Public != nil {
		l = m.Public.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClaimAccessControl_Private) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Private != nil {
		l = m.Private.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClaimComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Access.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.SchemeType != nil {
		n += m.SchemeType.Size()
	}
	if m.OutputType != nil {
		n += m.OutputType.Size()
	}
	return n
}

func (m *ClaimComponent_Pedersen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pedersen != nil {
		l = m.Pedersen.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClaimComponent_Schnorr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schnorr != nil {
		l = m.Schnorr.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClaimComponent_Gnark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gnark != nil {
		l = m.Gnark.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClaimComponent_Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transfer != nil {
		l = m.Transfer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClaimComponent_ContractCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractCall != nil {
		l = m.ContractCall.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClaimComponent_IbcContractCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcContractCall != nil {
		l = m.IbcContractCall.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClaimComponent_IbcSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcSend != nil {
		l = m.IbcSend.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OutputTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OutputContractCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ContractComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IBCMsgComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcMsgType != nil {
		n += m.IbcMsgType.Size()
	}
	return n
}

func (m *IBCMsgComponent_IbcContractCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcContractCall != nil {
		l = m.IbcContractCall.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IBCMsgComponent_IbcSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcSend != nil {
		l = m.IbcSend.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IBCContractCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IBCSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SchnorrSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PedersenCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TargetCommitment)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GnarkZkSnark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerificationKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PublicInputs)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Will) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Beneficiary)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Components) > 0 {
		for _, e := range m.Components {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Wills) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Wills) > 0 {
		for _, e := range m.Wills {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *WillIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *ExecutionComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransferComponent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ComponentType = &ExecutionComponent_Transfer{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClaimComponent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ComponentType = &ExecutionComponent_Claim{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContractComponent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ComponentType = &ExecutionComponent_Contract{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IBCMsgComponent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ComponentType = &ExecutionComponent_IbcMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *TransferComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ClaimAccessPublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimAccessPublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimAccessPublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ClaimAccessPrivate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimAccessPrivate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimAccessPrivate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ClaimAccessControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimAccessControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimAccessControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClaimAccessPublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessType = &ClaimAccessControl_Public{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClaimAccessPrivate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessType = &ClaimAccessControl_Private{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ClaimComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Access", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Access.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pedersen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PedersenCommitment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SchemeType = &ClaimComponent_Pedersen{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schnorr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SchnorrSignature{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SchemeType = &ClaimComponent_Schnorr{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gnark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GnarkZkSnark{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SchemeType = &ClaimComponent_Gnark{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OutputTransfer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutputType = &ClaimComponent_Transfer{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OutputContractCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutputType = &ClaimComponent_ContractCall{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcContractCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IBCContractCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutputType = &ClaimComponent_IbcContractCall{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcSend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IBCSend{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutputType = &ClaimComponent_IbcSend{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *OutputTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *OutputContractCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputContractCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputContractCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ContractComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *IBCMsgComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCMsgComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCMsgComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcContractCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IBCContractCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IbcMsgType = &IBCMsgComponent_IbcContractCall{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcSend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IBCSend{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IbcMsgType = &IBCMsgComponent_IbcSend{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *IBCContractCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCContractCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCContractCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = append(m.Chain[:0], dAtA[iNdEx:postIndex]...)
			if m.Chain == nil {
				m.Chain = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel[:0], dAtA[iNdEx:postIndex]...)
			if m.Channel == nil {
				m.Channel = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *IBCSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = append(m.Chain[:0], dAtA[iNdEx:postIndex]...)
			if m.Chain == nil {
				m.Chain = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = append(m.Denom[:0], dAtA[iNdEx:postIndex]...)
			if m.Denom == nil {
				m.Denom = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel[:0], dAtA[iNdEx:postIndex]...)
			if m.Channel == nil {
				m.Channel = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *SchnorrSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchnorrSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchnorrSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *PedersenCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PedersenCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PedersenCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCommitment = append(m.TargetCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.TargetCommitment == nil {
				m.TargetCommitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *GnarkZkSnark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GnarkZkSnark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GnarkZkSnark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationKey = append(m.VerificationKey[:0], dAtA[iNdEx:postIndex]...)
			if m.VerificationKey == nil {
				m.VerificationKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicInputs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicInputs = append(m.PublicInputs[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicInputs == nil {
				m.PublicInputs = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *Will) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Will: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Will: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beneficiary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beneficiary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Components = append(m.Components, &ExecutionComponent{})
			if err := m.Components[len(m.Components)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *Wills) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wills: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wills: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wills = append(m.Wills, &Will{})
			if err := m.Wills[len(m.Wills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *WillIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WillIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WillIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

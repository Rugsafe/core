syntax = "proto3";
// package wasmd.will;
package cosmwasm.will;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
// import "wasmd/will/params.proto";
import "cosmwasm/will/params.proto";
import "cosmwasm/will/types.proto";

option go_package = "github.com/CosmWasm/wasmd/x/will/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // create a new will
  rpc CreateWill(MsgCreateWillRequest) returns (MsgCreateWillResponse);

  // checkin into a will
  rpc CheckIn(MsgCheckInRequest) returns (MsgCheckInResponse);

  // make a claim
  rpc Claim(MsgClaimRequest) returns (MsgClaimResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "wasmd/x/will/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// message for creating a will
message MsgCreateWillRequest {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "wasmd/x/will/MsgCreateWillRequest";
  string creator = 1;
  string name = 2;
  string beneficiary = 3;
  int64 height = 4;
  repeated ExecutionComponent components = 5;
}

// to get the will response
message MsgCreateWillResponse {
  string id = 1;
  string creator = 2;
  string name = 3;
  string beneficiary = 4;
  int64 height = 5;
}

// checkins
//  message for checking in
message MsgCheckInRequest {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "wasmd/x/will/MsgCheckInRequest";
  string creator = 1;
  string id = 2;
  int64 height = 3;
}

// response for checkin
message MsgCheckInResponse {
  bool status = 1;
  int64 height = 2;
}

// claims
message MsgClaimRequest {
  option (cosmos.msg.v1.signer) = "claimer";
  option (amino.name) = "wasmd/x/will/MsgClaimRequest";

  // ID of the will being claimed
  string will_id = 1;

  // Claimer's address
  string claimer = 2;

  // component id
  string component_id = 3; // Add this line

  // OneOf claim data that contains the specific claim information based on the
  // will's execution component
  oneof claim_type {
    SchnorrClaim schnorr_claim = 4;
    PedersenClaim pedersen_claim = 5;
    GnarkClaim gnark_claim = 6;
  }
}

// SchnorrClaim is specifically structured for claims requiring a Schnorr
// signature.
message SchnorrClaim {
  // The public key associated with the Schnorr signature, typically 33 bytes.
  bytes public_key = 1;
  // The actual Schnorr signature, could be 64 bytes (r || s).
  bytes signature = 2;
  // The original message that was signed, needed for verification.
  bytes message = 3;
}

// pedersen
message PedersenClaim {
  // Specific fields for Pedersen claims, e.g., commitment, blinding factor,
  // etc.
  bytes commitment = 1;
  bytes blinding_factor = 2;
  bytes value = 3; // The actual value being revealed in the claim
}

// gnark
message GnarkClaim {
  // Specific fields for Gnark zk-SNARK claims, e.g., proof, public inputs, etc.
  bytes proof = 1;
  bytes public_inputs = 2; // Public inputs required for the proof verification
}

// MsgClaimResponse
message MsgClaimResponse {
  // Indicates whether the claim was successful or not
  bool success = 1;

  // Optional message providing more details on the claim result
  string message = 2;
}
syntax = "proto3";
package cosmwasm.will;

import "google/api/annotations.proto";
import "cosmwasm/will/types.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
// cosmos.query.v1.module_query_safe
option go_package = "github.com/CosmWasm/wasmd/x/will/types";

// Query defines the gRPC querier service for the will module.
service Query {
  // GetWill retrieves a will by its ID.
  rpc GetWill(QueryGetWillRequest) returns (QueryGetWillResponse) {
    option (google.api.http).get = "/cosmwasm/wasmd/will/{will_id}";
  }

  // GetWill retrieves all wills by an account address
  rpc ListWills(QueryListWillsRequest) returns (QueryListWillsResponse) {
    // option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/cosmwasm/wasmd/will/list/{address}";
  }
}

// QueryGetWillRequest is the request type for retrieving a will by its ID.
message QueryGetWillRequest { string will_id = 1; }

// QueryGetWillResponse is the response type returned after retrieving a will.
message QueryGetWillResponse {
  // will is the will body
  Will will = 1;
}

// QueryListWillsRequest request
message QueryListWillsRequest {
  // address is the address of the contract to query
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryListWillsRequest response
message QueryListWillsResponse {
  // the will struct for the entries of the response
  repeated Will wills = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}